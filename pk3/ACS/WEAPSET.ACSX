#library "WEAPSET"
#include "zcommon.acs"
//#include "weapon_enum.h"

// For Tests:
// Slot 1 - PP7
// Slot 2 - DD44
// Slot 3 - Klobb
// Slot 4 - KF7
// Slot 5 - Phantom
// Slot 6 - D5K
// Slot 7 - Cougar Magnum
// Slot 8 - Gold PP7

struct GEAmmo
{
	str class_name;
	str friendly_name;
}

enum
{
	AMMO_NONE,
	AMMO_BASIC,
	AMMO_POINTED,
	AMMO_SHOTGUN,
	AMMO_MAGNUM,
	AMMO_GOLDEN,
	AMMO_GRENADE,
	AMMO_ROCKET,
	AMMO_HANDGRENADE,
	AMMO_TIMEDMINE,
	AMMO_PROXMINE,
	AMMO_REMOTEMINE,
	AMMO_KNIFE,
	AMMO_MAX,
}

GEAmmo ammo_types[AMMO_MAX] = {
	{ "InvalidAmmo"			"invalid ammo type" },	// AMMO_NONE
	{ "9mmBullets",			"9mm ammo" },			// AMMO_BASIC
	{ "PointedBullets", 	"7.62mm ammo" },		// AMMO_POINTED
	{ "ShotgunCartridges",	"shotgun cartridges" },	// AMMO_SHOTGUN
	{ "MagnumBullets",		"magnum bullets" },		// AMMO_MAGNUM
	{ "GoldenBullet",		"golden bullets" },		// AMMO_GOLDEN
	{ "GrenadeRounds",		"grenade rounds" },		// AMMO_GRENADE
	{ "Rockets",			"rockets" },			// AMMO_ROCKET
	{ "HandGrenadeAmmo",	"grenades" },			// AMMO_HANDGRENADE
	{ "TimedMineAmmo",		"timed mines" },		// AMMO_TIMEDMINE
	{ "ProxMineAmmo",		"proximity mines" },	// AMMO_PROXMINE
	{ "RemoteMineAmmo",		"remote mines" },		// AMMO_REMOTEMINE
	{ "Knives",				"throwing knives" },	// AMMO_KNIFE
};

struct GEWeapon
{
	str class_name;
	str article;
	str friendly_name;
	str pickup_sound;
	bool has_clip;
	int ammo_type;
	int ammo_pickup;
	int ammo_box;
}

enum
{
	W_NONE,
	W_PP7,
	W_DD44,
	W_KLOBB,
	W_KF7,
	W_ZMG,
	W_AR33,
	W_RCP90,
	W_SHOTGUN,
	W_AUTOSHOTGUN,
	W_SNIPER,
	W_MAGNUM,
	W_GOLDGUN,
	W_LASER,
	W_GLAUNCHER,
	W_RLAUNCHER,
	W_HANDGRENADE,
	W_TIMEDMINE,
	W_PROXMINE,
	W_REMOTEMINE,
	W_THROWINGKNIFE,
	W_MAX,
};

GEWeapon weapons[W_MAX] = {
	{ "InvalidWeapon",			"an",	"Invalid Weapon",		"misc/w_pkup",	false,	AMMO_NONE,			0,	0 },	// W_NONE
	{ "PP7",					"a",	"PP7",					"misc/w_pkup",	true,	AMMO_BASIC,			10,	50 },	// W_PP7
	{ "DD44",					"a",	"DD44 Dostovei",		"misc/w_pkup",	true,	AMMO_BASIC,			10,	50 },	// W_DD44
	{ "Klobb",					"a",	"Klobb",				"misc/w_pkup",	true,	AMMO_BASIC,			10,	100 },	// W_KLOBB
	{ "KF7Soviet",				"a",	"KF7 Soviet",			"misc/w_pkup",	true,	AMMO_POINTED,		10,	100 },	// W_KF7
	{ "ZMG",					"a",	"ZMG",					"misc/w_pkup",	true,	AMMO_BASIC,			10,	100 },	// W_ZMG
	{ "AR33",					"an",	"AR-33",				"misc/w_pkup",	true,	AMMO_POINTED,		10,	100 },	// W_AR33
	{ "RCP90",					"an",	"RC-P90",				"misc/w_pkup",	true,	AMMO_BASIC,			10,	100 },	// W_RCP90
	{ "GE64Shotgun",			"a",	"Shotgun",				"misc/w_pkup",	true, 	AMMO_SHOTGUN,		5,	30 },	// W_SHOTGUN
	{ "AutomaticShotgun",		"an",	"Automatic Shotgun",	"misc/w_pkup",	true, 	AMMO_SHOTGUN,		5,	30 },	// W_AUTOSHOTGUN
	{ "SniperRifle",			"a",	"Sniper Rifle",			"misc/w_pkup",	true,	AMMO_POINTED,		10,	50 },	// W_SNIPER
	{ "CougarMagnum",			"a",	"Cougar Magnum",		"misc/w_pkup",	true,	AMMO_MAGNUM,		5,	50 },	// W_MAGNUM
	{ "GoldenGun",				"the",	"Golden Gun",			"misc/w_pkup",	true,	AMMO_GOLDEN,		2,	2 },	// W_GOLDGUN
	{ "MoonrakerLaser",			"a",	"Moonraker Laser",		"LaserUp",		false,	AMMO_NONE,			0,	0 },	// W_LASER
	{ "GE64GrenadeLauncher",	"a",	"Grenade Launcher",		"misc/w_pkup",	true,	AMMO_GRENADE,		3,	6 },	// W_GLAUNCHER
	{ "GE64RocketLauncher",		"a",	"Rocket Launcher",		"misc/w_pkup",	true,	AMMO_ROCKET,		1,	3 },	// W_RLAUNCHER
	{ "HandGrenades",			"a",	"Grenade",				"misc/w_pkup",	false,	AMMO_HANDGRENADE,	1,	5 },	// W_HANDGRENADE
	{ "TimedMines",				"a",	"Timed Mine",			"misc/w_pkup",	false,	AMMO_TIMEDMINE,		1,	5 },	// W_TIMEDMINE
	{ "ProximityMines",			"a",	"Proximity Mine",		"misc/w_pkup",	false,	AMMO_PROXMINE,		1,	5 },	// W_PROXMINE
	{ "RemoteMines",			"a",	"Remote Mine",			"misc/w_pkup",	false,	AMMO_REMOTEMINE,	1,	5 },	// W_REMOTEMINE
	{ "ThrowingKnives",			"a",	"Throwing Knife",		"KnifeUp",		false,	AMMO_KNIFE,			1,	10 },	// W_THROWINGKNIFE
};

struct GEWeaponSet
{
	str set_name;
	int set_weapons[8];
}

enum
{
	SET_SLAPPERS,
	SET_PISTOLS,
	SET_THROWINGKNIVES,
	SET_AUTOMATICS,
	SET_POWERWEAPONS,
	SET_SNIPERRIFLES,
	SET_GRENADES,
	SET_REMOTEMINES,
	SET_TIMEDMINES,
	SET_PROXMINES,
	SET_GLAUNCHERS,
	SET_ROCKETS,
	SET_LASERS,
	SET_GOLDENGUN,
	SET_GETCCLASSIC,
	SET_LASERWARS,
	SET_ROCKETCLUSTERFUCK,
	SET_MINEFIESTA,
	SET_MAX,
}

GEWeaponSet weaponsets[SET_MAX] = {
	{ "Hunting Knives Only!",	{ W_NONE, W_NONE, W_NONE, W_NONE, W_NONE, W_NONE, W_NONE, W_NONE } },
	{ "Pistols",				{ W_DD44, W_DD44, W_DD44, W_PP7, W_PP7, W_PP7, W_MAGNUM, W_MAGNUM } }, // Change to PP7 (Silenced) later.
	{ "Throwing Knives",		{ W_THROWINGKNIFE, W_THROWINGKNIFE, W_THROWINGKNIFE, W_THROWINGKNIFE, W_THROWINGKNIFE, W_THROWINGKNIFE, W_THROWINGKNIFE, W_THROWINGKNIFE } },
	{ "Automatics",				{ W_PP7, W_PP7, W_DD44, W_DD44, W_KLOBB, W_KLOBB, W_ZMG, W_ZMG } }, // Note: Change ZMG to D5K when implemented, and PP7 to silenced.
	{ "Power Weapons",			{ W_DD44, W_DD44, W_MAGNUM, W_MAGNUM, W_RCP90, W_RCP90, W_AUTOSHOTGUN, W_AUTOSHOTGUN } },
	{ "Sniper Rifles",			{ W_DD44, W_DD44, W_MAGNUM, W_MAGNUM, W_KLOBB, W_KLOBB, W_SNIPER, W_SNIPER } },
	{ "Grenades",				{ W_DD44, W_DD44, W_KLOBB, W_KLOBB, W_KF7, W_KF7, W_HANDGRENADE, W_HANDGRENADE } },
	{ "Remote Mines",			{ W_PP7, W_PP7, W_ZMG, W_ZMG, W_AR33, W_AR33, W_REMOTEMINE, W_REMOTEMINE } },
	{ "Timed Mines",			{ W_PP7, W_PP7, W_ZMG, W_ZMG, W_AR33, W_AR33, W_TIMEDMINE, W_TIMEDMINE } },
	{ "Proximity Mines",		{ W_PP7, W_PP7, W_ZMG, W_ZMG, W_AR33, W_AR33, W_PROXMINE, W_PROXMINE } },
	{ "Grenade Launchers",		{ W_DD44, W_DD44, W_KLOBB, W_KLOBB, W_KF7, W_KF7, W_GLAUNCHER, W_GLAUNCHER } },
	{ "Rockets",				{ W_DD44, W_DD44, W_KLOBB, W_KLOBB, W_KF7, W_KF7, W_RLAUNCHER, W_RLAUNCHER } },
	{ "Lasers",					{ W_DD44, W_DD44, W_KLOBB, W_KLOBB, W_KF7, W_KF7, W_LASER, W_LASER } },
	{ "Golden Gun",				{ W_DD44, W_DD44, W_KLOBB, W_KLOBB, W_KF7, W_KF7, W_PP7, W_GOLDGUN } }, // Change to PP7 (Silenced) later.
	{ "GETC Classic",			{ W_PP7, W_KLOBB, W_KF7, W_SHOTGUN, W_LASER, W_RLAUNCHER, W_RCP90, W_GOLDGUN } },
	{ "Laser Wars",				{ W_LASER, W_LASER, W_LASER, W_LASER, W_LASER, W_LASER, W_LASER, W_LASER } },
	{ "Rocket Clusterfuck",		{ W_RLAUNCHER, W_RLAUNCHER, W_RLAUNCHER, W_RLAUNCHER, W_RLAUNCHER, W_RLAUNCHER, W_RLAUNCHER, W_RLAUNCHER } },
	{ "Mine Fiesta",			{ W_HANDGRENADE, W_HANDGRENADE, W_TIMEDMINE, W_REMOTEMINE, W_REMOTEMINE, W_PROXMINE, W_PROXMINE, W_RLAUNCHER } },
};

script "RANDOMWEAPONSET" OPEN
{
	if((GameType() == GAME_NET_DEATHMATCH) && GetCVar("ge_randomweaponset"))
	{
		SetCVar("ge_weaponset", random(0, SET_MAX-1));
	}
}

function int GetWeaponNum(int slot)
{
	return weaponsets[GetCVar("ge_weaponset")].set_weapons[slot];
}

function GEWeapon GetGEWeapon(int slot)
{
	return weapons[GetWeaponNum(slot)];
}

function GEAmmo GetGEAmmo(int slot)
{
	GEWeapon weapon = GetGEWeapon(slot);
	return ammo_types[weapon.ammo_type];
}

function bool GiveAmmo(int slot)
{
	GEWeapon weapon = GetGEWeapon(slot);
	GEAmmo ammo = GetGEAmmo(slot);
	if((GetWeaponNum(slot) == W_NONE) || (weapon.ammo_box == 0) || (weapon.ammo_type == AMMO_NONE) || (CheckInventory(ammo.class_name) >= GetAmmoCapacity(ammo.class_name)))
	{
		return false;
	}
	
	SetHudSize(320, 240, false);
	SetFont("SMALLFONT");
	HudMessage(s:"Picked up some ", s:ammo.friendly_name, s:".";
	HUDMSG_FADEOUT, 777, CR_WHITE, 8.1, 190.1, 4.0, 0.5);
	PlaySound(0, weapon.pickup_sound, CHAN_AUTO, 1.0, false, 1.0);
	
	GiveInventory(ammo.class_name, weapon.ammo_box);
	
	if(!weapon.has_clip)
	{
		GiveInventory(weapon.class_name, 1);
	}
	
	return true;
}

script "GIVEAMMO" (int slot)
{
	SetActivatorToTarget(0);
	SetResultValue(GiveAmmo(slot));
}

script "GIVEAMMOSLOT" (int slot)
{	
	GEWeapon weapon = GetGEWeapon(slot);
	if(weapon.ammo_type != AMMO_NONE)
	{
		int success = ACS_NamedExecuteWithResult("GIVEAMMO", slot);
		if(success)
		{
			SetActorState(0, "WaitForRespawn");
		}
	}
}

script "AMMOSTATE" (int slot) CLIENTSIDE
{
	GEWeapon weapon = GetGEWeapon(slot);
	
	if((GetWeaponNum(slot) == W_NONE) || (weapon.ammo_box == 0) || (weapon.ammo_type == AMMO_NONE))
	{
		SetActorState(0, "HideAmmo", false); 
	}
	else
	{
		SetActorState(0, "SpawnLoop", false);
	}
}

function bool GiveWeapon(int weapon_num, bool use_message, bool dropped)
{
	if(weapon_num == W_NONE)
	{
		return false;
	}
	
	GEWeapon weapon = weapons[weapon_num];
	GEAmmo ammo = ammo_types[weapon.ammo_type];
	
	bool has_weapon = (CheckInventory(weapon.class_name) != 0);
	bool at_capacity = (CheckInventory(ammo.class_name) >= GetAmmoCapacity(ammo.class_name));
	
	if(has_weapon && (at_capacity || (weapon.ammo_type == AMMO_NONE) || GetCVar("sv_weaponstay")))
	{
		return false;
	}
	
	if(use_message)
	{
		SetHudSize(320, 240, false);
		SetFont("SMALLFONT");
		HudMessage(s:"Picked up ", s:weapon.article, s:" ", s:weapon.friendly_name, s:".";
		HUDMSG_FADEOUT, 777, CR_WHITE, 8.1, 190.1, 4.0, 0.5);
		PlaySound(0, weapon.pickup_sound, CHAN_AUTO, 1.0, false, 1.0);
	}
	
	if(!has_weapon && weapon.has_clip)
	{
		str clip_name = StrParam(s:weapon.class_name, s:"Clip");
		int clip_capacity = GetAmmoCapacity(clip_name);
		
		if(GetCvar("ge_fullmagonpickup"))
		{
			GiveInventory(clip_name, clip_capacity);
			GiveInventory(ammo.class_name, weapon.ammo_pickup);
		}
		else if(weapon.ammo_pickup > clip_capacity)
		{
			GiveInventory(clip_name, clip_capacity);
			GiveInventory(ammo.class_name, weapon.ammo_pickup-clip_capacity);
		}
		else
		{
			GiveInventory(clip_name, weapon.ammo_pickup);
		}
	}
	else
	{
		GiveInventory(ammo.class_name, weapon.ammo_pickup);
	}
	
	GiveInventory(weapon.class_name, 1);
	
	if(GetCVar("sv_weaponstay") && !dropped)
	{
		return false;
	}
	
	return true;
}

script "GIVEWEAPON" (int weapon_num, int dropped, int usetarget)
{
	if(usetarget)
	{
		SetActivatorToTarget(0);
	}
	
	SetResultValue(GiveWeapon(weapon_num, true, dropped));
}

script "GIVEWEAPONSLOT" (int slot)
{
	if(GetWeaponNum(slot) != W_NONE)
	{
		int success = ACS_NamedExecuteWithResult("GIVEWEAPON", GetWeaponNum(slot), false, true);
		if(success)
		{
			SetActorState(0, "WaitForRespawn");
		}
	}
}

script "WEAPONSTATE" (int slot) CLIENTSIDE
{
	GEWeapon weapon = GetGEWeapon(slot);
	if(GetWeaponNum(slot) == W_NONE)
	{
		SetActorState(0, "HideWeapon", false); 
	}
	else
	{
		SetActorState(0, weapon.class_name, false);
	}
}

function void GiveStartWeapon(void)
{
	if(GetCVar("ge_startweapon"))
	{	
		if(GetWeaponNum(0) != W_NONE)
		{
			GiveWeapon(GetWeaponNum(0), false, false);
			SetWeapon(weapons[GetWeaponNum(0)].class_name);
		}
	}
}

function str GetWeaponSetName(void)
{
	return weaponsets[GetCVar("ge_weaponset")].set_name;
}

int last_weapon_set = -1;
script "DISPLAYSET" ENTER CLIENTSIDE
{
	if((ConsolePlayerNumber() != PlayerNumber()) || (ConsolePlayerNumber() == -1))
	{
		Terminate;
	}
	
	if(GameType() == GAME_NET_DEATHMATCH)
	{
		while(1)
		{
			delay(35);
			int current_set = GetCVar("ge_weaponset");
			if(current_set != last_weapon_set)
			{
				last_weapon_set = current_set;
				int ypos = 64.1;
				int messageid = 800;

				SetHudSize(640, 480, false);
				SetFont("SMALLFONT");
				HudMessage(s:"Weapon Set: \cd", s:GetWeaponSetName();
				HUDMSG_FADEINOUT | HUDMSG_LOG, messageid, CR_WHITE, 8.1, ypos, 6.0, 0.5, 2.0);
				
				for(int i = 0; i < 8; i++)
				{
					messageid++;
					HudMessage(s:"";
					HUDMSG_PLAIN, messageid, CR_WHITE, 0.0, 0.0, 0.0);
					
					if((weaponsets[current_set].set_weapons[i] != W_NONE) && ((i == 0) || ((i > 0) && weaponsets[current_set].set_weapons[i] != weaponsets[current_set].set_weapons[i-1])))
					{
						ypos += 14.0;
						GEWeapon weapon = GetGEWeapon(i);
						HudMessage(s:"\cf", s:weapon.friendly_name;
						HUDMSG_FADEINOUT | HUDMSG_LOG, messageid, CR_WHITE, 8.1, ypos, 6.0, 0.5, 2.0);
					}
				}
			}
		}
	}
}

script "STARTWEAPON" ENTER
{
	if(GameType() == GAME_NET_DEATHMATCH)
	{
		Delay(1);
		GiveStartWeapon();
	}
}

script "RESPAWNWEAPON" RESPAWN
{
	GiveStartWeapon();
}

script "CALCULATERESPAWNTIMER" (void)
{
	int dividend = PlayerCount()/4;
	int time = 35*30;
	
	if(dividend <= 0)
	{
		dividend = 1;
	}
	
	SetResultValue(time/dividend);
}